/*---------------------------------------------------------------------------
Command to run model:
--  dbt run --select ETL_MART_ENGINEERING_PART_AGILE
-- dbt run --full-refresh --select ETL_MART_ENGINEERING_PART_AGILE

Version     Date            Author              Description
-------     --------        -----------         ----------------------------------
1.0         05 OCT 2022      RAMYA Nagaraj      Initial Version
2.0         10 OCT 2022      Vinay Subramnian   Adding IS_ON_TARGET column logic
3.0         08 NOV 2022      KALI DANDAPANI     Remove the JRN_FLAG AND EFFT DATE from current model and moved to ETL_MART_ENGINEERING_PART
4.0         30 JAN 2023      RAMYA NAGARAJ      MADE from clause as SUBQUERY for PART_S CTE  AND CHANGED THE LOGIC OF BUY_SELL_CODE

---------------------------------------------------------------------------*/

{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['PART_ID']-%}
{% if is_incremental() %}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
{%-set v_update_column_list =  edw_get_quoted_column_list( this ,v_pk_list|list + ['BIW_INS_DTTM']|list) -%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
--DBT Variable
--SELECT {{v_all_column_list}}  
--SELECT {{v_update_column_list}}  
--SELECT {{v_md5_column_list}}
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_ENGINEERING_PART_AGILE'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}

{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building ETL table PART for Engineering Mart'
        ,transient=true   
        ,materialized='table'
        ,schema ='ETL_MART_ENGINEERING'
        ,alias='PART_AGILE'
        ,tags =['MART_ENGINEERING','MART_SALES']
        ,post_hook= [v_sql_upd_success_batch]	
        )
}}

WITH PART_S AS (
SELECT 
    PART_NO  AS PART_ID,
    EFF_DATE AS EFFECTIVE_DATE,
    NVL(UPPER(DESCRIPTION),' ') AS PART_DESCRIPTION,
    NVL(LEGACY_PART_NUMBER,' ')  AS LEGACY_PART_ID,
    SUBSTR(NVL(PAL4_CD, ' '), 1, 1) AS PAL1_CODE,
    SUBSTR(NVL(PAL4_CD, ' '), 1, 2) AS PAL2_CODE,
    SUBSTR(NVL(PAL4_CD, ' '), 1, 3) AS PAL3_CODE,
    NVL(PAL4_CD, ' ') AS PAL4_CODE,
    NVL(PART_CLASS_CD, ' ')  AS PART_CLASS_CODE,
    NVL(PART_CLASS_DESC, ' ') AS PART_CLASS_DESCRIPTION,
    NVL(AEC_QUAL, ' ') AS AEC_QUALIFIED_CODE,
    NVL(CASE_OUTLINE_ID, ' ') AS CASE_OUTLINE_CODE,
    NVL(COMMODITY_CD, ' ') AS COMMODITY_CODE,
    NVL(LEAD_FINISH_CATEGORY_ECAT, ' ')  AS ECAT_CODE,
    NVL(CUSTMS_ECCN_CD, ' ')  AS ECCN_CODE,
    SUBSTR(NVL(ERP_RESOURCE_ASY_CD, ' '),0,4) AS ERP_RESOURCE_ASY_CODE,
    NVL(ERP_RESOURCE_ASY_DESC, ' ') AS ERP_RESOURCE_ASY_DESCRIPTION,
    SUBSTR(NVL(ERP_RESOURCE_BSP_CD, ' '),0,8) AS ERP_RESOURCE_BSP_CODE,
    SUBSTR(NVL(ERP_RESOURCE_FAB_CD, ' '),0,8) AS ERP_RESOURCE_FAB_CODE,
    SUBSTR(NVL(ERP_RESOURCE_FSP_CD, ' '),0,8) AS ERP_RESOURCE_FSP_CODE,
    SUBSTR(NVL(ERP_RESOURCE_MEF_CD, ' '),0,3)  AS ERP_RESOURCE_MEF_CODE,
    SUBSTR(NVL(ERP_RESOURCE_SWF_CD, ' '),0,8) AS ERP_RESOURCE_SWF_CODE,
    SUBSTR(NVL(ERP_RESOURCE_TST_CD, ' '),0,3)  AS ERP_RESOURCE_TST_CODE,
    PRI_CONT_QTY_MPQ_CUSTOM AS MPQ_PRI_CONTAINER_QUANTITY,
    NVL(MSL, ' ')  AS MSL_VALUE,
    NVL(MSL_TEMP,0)::NUMBER AS MSL_TEMPERATURE,
    NVL(PART_RELEASE_STATUS, ' ')  AS PART_RELEASE_STATUS_CODE,
    NVL(PART_RELEASE_STATUS_DESC, ' ') AS PART_RELEASE_STATUS_DESCRIPTION,
    CONTROLLING_DOC AS PART_SPEC_ID,
    NVL(PPAP_CAPABLE_CD, ' ') AS PPAP_CAPABLE_CODE,
    NVL(PART_RELEASE_STATUS, ' ') AS QUALITY_LVL_CODE,
    NVL(PART_QUAL_TRGT_MKT_CD, ' ') AS QUALITY_LVL_TARGET_MARKET_DESCRIPTION,
    NVL(PDPW,0)::NUMBER AS PDPW_VALUE,
    coalesce(try_to_boolean(UL_LISTED_FLG),'FALSE')::BOOLEAN AS IS_UL_LISTED,
    NVL(UOM, ' ')  AS UOM_OPERATIONS_CODE,
    CAST(CASE
    --  NON-NUMERIC STRINGS ARE CONVERTED TO 0 DIAMETER.
    --  IF THE DIAMETER IS BETWEEN 50 AND 450, IT'S IN MM.
    WHEN try_to_number(WAFER_SIZE) BETWEEN 50 AND 450
    THEN try_to_number(WAFER_SIZE)
    --  IF THE DIAMETER IS BETWEEN 3 AND 18, IT'S IN INCHES, AND THERE ARE 25 MM PER INCH.
    WHEN try_to_number(WAFER_SIZE) BETWEEN 3 AND 18
    THEN try_to_number(WAFER_SIZE) * 25
    ELSE 0 END AS NUMBER) AS WAFER_SIZE_VALUE,
    TRUNC(NVL(LAST_ORDER_DATE,TO_DATE('1-1-1900', 'MM-DD-YYYY')),'DD') AS LAST_ORDER_DATE,
    TRUNC(NVL(LAST_SHIP_DATE,TO_DATE('1-1-1900', 'MM-DD-YYYY')),'DD') AS LAST_SHIP_DATE,
    TRUNC(NVL(NEW_PROD_DEF_DATE,TO_DATE('1-1-1900', 'MM-DD-YYYY')),'DD') AS NEW_PART_DEFINITION_DATE,
    TRUNC(NVL(NEW_PROD_DEF_DATE + 1095  , TO_DATE('1-1-1900', 'MM-DD-YYYY')),'DD')  AS NEW_PART_EXP_DATE,
    TRUNC(NVL(PART_REL_DATE_PROD,TO_DATE('1-1-1900', 'MM-DD-YYYY')),'DD')  AS PART_RELEASE_PRODUCTION_DATE,
    coalesce(try_to_boolean(BURNIN_FLG),'FALSE')::BOOLEAN   AS IS_BURN_IN,
    NVL(BUY_SELL_FLG,' ') AS BUY_SELL_CODE,
    coalesce(try_to_boolean(CASE WHEN SPEC_FINAL_TEST_FLG = 'Y' THEN 'Y' ELSE 'N' END),'FALSE')::BOOLEAN AS IS_CUSTOM_ELEC_TEST,
    coalesce(try_to_boolean(CASE WHEN SPEC_MARKING_FLG = 'Y' THEN 'Y' ELSE 'N' END),'FALSE')::BOOLEAN AS IS_CUSTOM_MARK_ONLY,
    coalesce(try_to_boolean(CASE WHEN CUST_CONSGN_FLG = 'Y' THEN 'Y' ELSE 'N' END),'FALSE')::BOOLEAN AS IS_CUSTOMER_CONSIGN_TO_ON,
    coalesce(try_to_boolean(CASE WHEN PART_USAGE = 'Y' THEN 'Y' ELSE 'N' END),'FALSE')::BOOLEAN AS IS_ENG_PART,
    coalesce(try_to_boolean(HALIDE_FREE_FLG),'FALSE')::BOOLEAN AS IS_HALIDE_FREE,
    coalesce(try_to_boolean(ITAR_PART_FLG),'FALSE')::BOOLEAN AS IS_ITAR,
    CASE WHEN PB_FREE_DIE_ATTACH_FLG  = 'Y'  THEN 'Y' ELSE 'N' END AS LEADED_DIE_ATTACH_CODE,
    NVL(MIL_CMPLNC_FLG, 'N')  AS MILITARY_COMPLIANCE_CODE,
    coalesce(try_to_boolean(CASE WHEN PART_TYPE  = 'Orderable Part' THEN 'Y' ELSE 'N' END),'FALSE')::BOOLEAN  AS IS_OPN,
    Coalesce(try_to_boolean(PB_FREE_LEADS_FLG),'FALSE')::BOOLEAN AS IS_PB_FREE_LEADS,
    NVL(ROHS_CHINA_FLG, 'N') AS ROHS_CHINA_CODE, 
    NVL(ROHS_2LI_CD,' ') AS ROHS_EU_EXEMPTION_CODE, 
    NVL(ROHS_EU_FLG, 'N') AS ROHS_EU_CODE,
    NVL(FREE_SAMPLE_ALLOWED_FLG, 'N')  AS SAMPLE_ALLOW_CODE,
    CASE WHEN FREE_SAMPLE_ALLOWED_FLG = 'Y' THEN 1 ELSE 0 END AS SOQ_QUANTITY,
    coalesce(try_to_boolean(VALUED_PART_FLG),'FALSE')::BOOLEAN  AS IS_VALUED_PART,
    NVL(CREATE_USER , ' ') AS CREATE_BY,
    NVL(CREATE_DATE, TO_DATE('1-1-1900', 'MM-DD-YYYY')) AS CREATE_DATE,
    NVL(PART_TYPE, ' ')  AS PART_TYPE_DESCRIPTION,
    NVL(PART_SUB_TYPE, ' ')  AS PART_SUB_TYPE_CD,
    NVL(LIFECYCLE_PHASE, ' ')  AS LIFECYCLE_PHASE_DESCRIPTION,
    NVL(MKTG_PROD_LIFECYCLE , ' ') AS MARKET_PART_LIFECYCLE_DESCRIPTION,
    NVL(PACKING_CONFIG_ID, ' ')  AS PACKING_CONFIG_ID,
    NVL(PART_OWNER, ' ')  AS PART_OWNER_DESCRIPTION,
    NVL(CORE_PART_NO_CONFIG_ID, ' ')  AS CORE_PART_NO_CONFIG_ID,
    NVL(SAFE_LAUNCH_FLG, 'N')  AS SAFE_LAUNCH_CODE,
    NVL(DESIGN_TYPE, ' ')  AS DESIGN_TYPE_DESC,
    NVL(MKT_SEG_SUBSEG_EUC_PRI, ' ')  AS MKT_SEG_SUBSEG_EUC_PRI_DESC,
    NVL(WSTS_CD, ' ')   AS WSTS_CD,
    NVL(PROJECT_NUMBER, ' ')  AS PROJECT_NUMBER_CD,
    NVL(CASE_OUTLINE_ID, ' ') AS CASE_OUTLINE_ID,
    NVL(DIE_DESIGN_CONFIG_ID, ' ')  AS DIE_DESIGN_CONFIG_ID,
    NVL(WAFER_BACKSIDE_VAR_ID, ' ')  AS WAFER_BACKSIDE_VAR_ID,
    NVL(WAFER_FRONTSIDE_VARIANT_ID, ' ')  AS WAFER_FRONTSIDE_VARIANT_ID,
    NVL(WAFER_TECH_VARIANT_ID, ' ')  AS WAFER_TECH_VARIANT_ID,
    NVL(CHANGE_ORDER_NO, ' ')  AS ENGG_CHNG_ORDER_ID,
    NVL(CUST_SPEC_CONTROLLED_FLG, 'N')  AS CUST_SPEC_CONTROLLED_CODE,
    NVL(AEC_QUAL, ' ')  AS AEC_QUAL,
    coalesce(LEFT(PART_QUAL_TRGT_MKT_DESC,1),'U') AS  PART_QUALITY_TARGET_MARKET_TYPE, ---
    NVL(PART_QUAL_TRGT_MKT_DESC, 'Unspecified')  AS PART_QUALITY_TARGET_MARKET_DESCRIPTION,----
    NVL(LEGACY_COMPANY_NAME, ' ')  AS LEGACY_COMPANY_NAME,
    NVL(GLOBAL_PART_ID, ' ')  AS GLOBAL_PART_ID,
    NVL(PART_OWNER, ' ')  AS PART_OWNER_NAME,
    NVL(SCM_PLANNING_TYPE, ' ')  AS SUPPLY_CHN_PLNG_CODE,
    NVL(ANCHOR_STAR_PROD_FLG, ' ')  AS ANCHOR_STAR_PRODUCT_CODE,
    NVL(MFG_PART_NUM, ' ')  AS MFG_PART_ID,
    NVL(MKT_PROD_NO, ' ')  AS MARKET_PN,
    coalesce(try_to_boolean(MKT_PROD_NO_FLG),'FALSE')::BOOLEAN  AS IS_MARKET_PN,
    NVL(ENG_PKG_VAR, ' ')  AS ENG_PKG_VAR_ID,
    NVL(FLOW_CD, ' ')  AS FLOW_CODE,
    coalesce(try_to_boolean(SPECIAL_CNTRL_BOM_FLG),'FALSE')::BOOLEAN  AS IS_SPEC_CNTRL_BOM,
    NVL(ENG_PKG_CD, ' ')  AS ENG_PKG_CODE,
    coalesce(try_to_boolean(CONTAIN_ENCRYPT_FLG),'FALSE')::BOOLEAN  AS IS_CONTAIN_ENCRYPT,
    NVL(SOLUTION_SELLING_TYPE, ' ')  AS SOLUTION_SELLING_TYPE,
    NVL(SUBJECT_EXPORT_ADMIN_REG, ' ')  AS SUBJECT_EXPORT_ADMIN_REG,
    coalesce(try_to_boolean( PB_FREE_PART_FLG),'FALSE')::BOOLEAN  AS IS_PB_FREE_PART,
    NVL(PB_FREE_PART_DESC, ' ')  AS PB_FREE_PART_DESCRIPTION,
    NVL(PB_FREE_PART_EXEMPT, ' ')  AS PB_FREE_PART_EXEMPT,
    coalesce(try_to_boolean(LABEL_SYMBOL_ROHS_EU_FLG),'FALSE')::BOOLEAN  AS IS_LABEL_SYMBOL_ROHS_EU,
    coalesce(try_to_boolean(LABEL_SYMBOL_ROHS_CHINA_FLG),'FALSE')::BOOLEAN  AS IS_LABEL_SYMBOL_ROHS_CHINA,
    NVL(LABEL_SYMBOL_ROHS_CHINA_VAL, ' ')  AS LABEL_SYMBOL_ROHS_CHINA_VALUE,
    coalesce(try_to_boolean(LABEL_SYMBOL_PBFREE_2LI_FLG),'FALSE')::BOOLEAN  AS IS_LABEL_SYMBOL_PBFREE_2LI,
    coalesce(try_to_boolean(LABEL_SYMBOL_2LI_FLG),'FALSE')::BOOLEAN AS IS_LABEL_SYMBOL_2LI,
    coalesce(try_to_boolean(LABEL_SYMBOL_ECAT_FLG),'FALSE')::BOOLEAN  AS IS_LABEL_SYMBOL_ECAT,
    coalesce(try_to_boolean(LABEL_SYMBOL_HALIDE_FREE_FLG),'FALSE')::BOOLEAN  AS IS_LABEL_SYMBOL_HALIDE_FREE,
    coalesce(try_to_boolean(LABEL_SYMBOL_RU_FLG),'FALSE') ::BOOLEAN AS IS_LABEL_SYMBOL_RU,
    NVL(LABEL_SYMBOL_ECAT_CD, ' ')  AS LABEL_SYMBOL_ECAT_CODE,
    NVL(PART_REL_DATE_FCST,DATE('01.01.1990', 'MM.DD.YYYY') ) AS PART_REL_FCST_DATE,
    CONCAT(IFNULL(ERP_RESOURCE_ASY_CD,' '),'-',IFNULL(ERP_RESOURCE_ASY_DESC,' ')) AS PACKAGE_CODE_DESCRIPTION,
    CUSTOMS_CONFIG_ID,
    LEAD_FINISH_CATEGORY_ECAT,
    JRN_FLAG
FROM 
 (select 
 * from  {{source ('STG_PDM_PRODCENT','PART')}}   
 QUALIFY( ROW_NUMBER() OVER (PARTITION BY PART_NO ORDER BY  EFF_DATE DESC, JRN_DATE DESC, BIW_UPD_DTTM DESC) =1))
WHERE  JRN_FLAG IN ('I','U')  
AND EFF_DATE != '19-SEP-1999' 
AND EFF_DATE <= DATE_TRUNC('DAY', SYSDATE())
),

PACKING_CONFIGURATION AS (
SELECT 
    PACKING_CONFIG_ID, 
    EFF_DATE,
    PRI_CONT_QTY_MPQ, 
    PRI_CONT_TYPE AS MPQ_PRI_CONTAINER_CODE, 
    JRN_DATE
FROM   {{source ('STG_PDM_PRODCENT','PACKING_CONFIGURATION')}} 
WHERE JRN_FLAG IN ('I', 'U')
QUALIFY( row_number() OVER (PARTITION BY PACKING_CONFIG_ID ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC)=1)                      
),

CUSTOMS_CONFIG AS (
SELECT 
    CUSTOMS_CONFIG_ID, 
    EFF_DATE,
    CUSTMS_HARMNZD_TARF_US_CD  AS HTS_US_CODE,
    DESCRIPTION AS HTS_US_CODE_DESCRIPTION,
    REV_REL_DATE AS LAST_CHANGE_DATE,
    CUSTMS_TARF_EU_2_CD AS HTS_EU_CODE,
    CUSTMS_HARMNZD_TARF_EU_8_CD AS HTS_EU_8_CODE,
    JRN_DATE   
FROM   {{source ('STG_PDM_PRODCENT','CUSTOMS_CONFIG')}} 
WHERE JRN_FLAG IN ('I', 'U')
QUALIFY( row_number() OVER (PARTITION BY CUSTOMS_CONFIG_ID ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC)=1)                      
),

CASE_OUTLINE AS
(
select 
    CASE_OUTLINE_ID,
    PACKAGE_TYPE_ID,
    JRN_DATE
FROM 
  {{source ('STG_PDM_PRODCENT','CASE_OUTLINE_VARIANT')}}  
  WHERE JRN_FLAG IN ('I', 'U')
  QUALIFY( row_number() OVER (PARTITION BY CASE_OUTLINE_ID  ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC)=1) 
),

ENG_PKG_TYPE AS
(
SELECT
    PACKAGE_TYPE_ID,
    EFF_DATE,
    ENG_PKG_FAM,
    JRN_DATE
FROM 
  {{source ('STG_PDM_PRODCENT','ENG_PKG_TYPE')}} 
  WHERE JRN_FLAG IN ('I', 'U')
  QUALIFY( row_number() OVER (PARTITION BY PACKAGE_TYPE_ID  ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC)=1)   
),


WAFER_TECH_VARIANT AS (
SELECT
    WAFER_TECH_VARIANT_ID,
    WAFER_TECH_TYPE_ID,
    JRN_DATE
FROM {{source ('STG_PDM_PRODCENT','WAFER_TECH_VARIANT')}}
WHERE JRN_FLAG IN ('I', 'U')
QUALIFY( row_number() OVER (PARTITION BY WAFER_TECH_VARIANT_ID  ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC)=1)       
),

ENG_WAFER_TECH AS (
SELECT
    WAFER_TECH_TYPE_ID,
    WAFER_TECH_FAM_ID
FROM {{source ('STG_PDM_PRODCENT','ENG_WAFER_TECH_TYPE')}}
WHERE JRN_FLAG IN ('I', 'U')
QUALIFY( row_number() OVER (PARTITION BY WAFER_TECH_TYPE_ID  ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC)=1)       
),


-----------------------------Procedent end ---------------------------


-----------------GPS Owner-----------------------------------
STG_PRICE_OUT AS
(
SELECT
    ONPN ,
    PROGRAM_CD,
    PTI_CD,
    EFFECTIVE_DT,
    EXPIRATION_DT,
    PRICE_BOOK_FLG,
    MARKET_CD,
    STEP_PRICE_FLG,
    NCNR_FLG
FROM {{source ('STG_GPS2_GPS_ADMIN','STG_PRICE_OUT')}} 
WHERE
EXPIRATION_DT > CURRENT_DATE  AND 
EFFECTIVE_DT <= CURRENT_DATE  AND 
NOT (PTI_CD LIKE 'PZ%')
QUALIFY( row_number() OVER (PARTITION BY ONPN  ORDER BY BIW_UPD_DTTM DESC)=1) 
),


------------------EBS Description --------------------------
XXON_PAL_HIERARCHY AS
(
  SELECT
    PAL3_CD,
    BU_CD,
    GROUP_CD,
    GROUP_DESC,
    DIV_CD,
    DIV_DESC,
    BU_DESC,
    OPR_CD,
    OPR_DESC
FROM
    {{source ('STG_EBS_APPS','XXON_PAL_HIERARCHY')}} 
QUALIFY( row_number() OVER (PARTITION BY  PAL3_CD  ORDER BY BIW_UPD_DTTM DESC)=1)
),

---------------MainFrame Description for PAL Code --------------
PAL_CODE_DESC AS (
    SELECT 
    TRIM(PTI_CD) PAL_CODE,
    TRIM(PTI_DESC) AS PAL_DESCRIPTION
FROM {{source ('STG_MAINFRAME','STG1_PTI_DAILY')}}
QUALIFY( row_number() OVER (PARTITION BY PTI_CD ORDER BY BIW_UPD_DTTM DESC)=1)
),

-------------- APS Attributes -----------------------------------------
APS_STG_XREF AS 
(
SELECT 
TARGET_SUBTYPE,
MAX(STAGE_ID) AS STAGE_ID
FROM {{source ('STG_PLAN_APSWEB_OWNER','AGL_APS_STAGE_XREF')}} 
WHERE COMPONENT_SUBTYPE is null
and ROUTING_KIND is null
GROUP BY TARGET_SUBTYPE
-- Not required as group by is applied
--  QUALIFY( row_number() OVER (PARTITION BY TARGET_SUBTYPE,COMPONENT_SUBTYPE,SITE_ID,STAGE_ID ORDER BY BIW_UPD_DTTM DESC)=1) 
),

APS_STG_MASTER AS 
(
SELECT 
STAGE_ID,
MAX(STAGE_TYPE) AS STAGE_TYPE 
FROM {{source ('STG_PLAN_APSWEB_OWNER','SC_STAGE_MASTER')}} 
GROUP BY STAGE_ID
-- Not required as group by is applied
--  QUALIFY( row_number() OVER (PARTITION BY STAGE_ID ORDER BY BIW_UPD_DTTM DESC)=1) 
),

APS_STG_SEQ AS 
(
SELECT 
STAGE_ID,
MAX(SEQ_NO) AS SEQ_NO
FROM  {{source ('STG_PLAN_APSWEB_OWNER','SC_STAGE_SEQUENCE')}} 
GROUP BY STAGE_ID
-- Not required as group by is applied
--  QUALIFY( row_number() OVER (PARTITION BY STAGE_ID ORDER BY BIW_UPD_DTTM DESC)=1) 
),
--- APS and Oracle attribute--- 
BIWSTAGE_SUBTYPE AS
(SELECT 
    2 as QUERY_RANK,
    PART_SUB_TYPE_CD as TARGET_SUBTYPE,
    MAX(STAGE_CD) as STAGE,
    MAX(FE_BE_FLG) as FE_BE_FLG,
    MAX(SEQ_NO) as SEQ_NO
from {{source ('STG_DWH_BIWSTAGE','SUBTYPE_FE_BE_FLG')}}
GROUP BY PART_SUB_TYPE_CD
),

AGL_APS_STAGE_XREF 
 AS
(
SELECT 
    1 as QUERY_RANK,
    STG_XREF.TARGET_SUBTYPE,
    STG_XREF.STAGE_ID as STAGE,
    STG_MASTER.STAGE_TYPE as FE_BE_FLG,
    STG_SEQ.SEQ_NO
FROM APS_STG_XREF STG_XREF
LEFT OUTER JOIN APS_STG_MASTER  STG_MASTER   		
        on STG_XREF.STAGE_ID = STG_MASTER.STAGE_ID	  		
LEFT OUTER JOIN APS_STG_SEQ STG_SEQ	
        on STG_XREF.STAGE_ID = STG_SEQ.STAGE_ID
        
UNION 

SELECT 
    2 as QUERY_RANK,
    BIW.TARGET_SUBTYPE,
    BIW.STAGE,
    BIW.FE_BE_FLG,
    coalesce(STG_SEQ.SEQ_NO, BIW.SEQ_NO) as SEQ_NO
from BIWSTAGE_SUBTYPE  BIW  
LEFT OUTER JOIN  APS_STG_SEQ STG_SEQ	
    on BIW.STAGE = STG_SEQ.STAGE_ID 

QUALIFY ( ROW_NUMBER () OVER( PARTITION BY TARGET_SUBTYPE ORDER BY QUERY_RANK ) = 1 )
),
--------------------DWH_IO Attributes -------------------------
STG_DWH_IO AS
(
    SELECT 
        ITEM,
        NVL(PRODUCT_LIFECYCLE_STAGE, ' ') AS PRODUCT_LIFECYCLE_STAGE
    FROM {{source ('STG_DWH_IO','ITEM')}}
    QUALIFY( row_number() OVER (PARTITION BY ITEM ORDER BY BIW_UPD_DTTM DESC)=1) 

),
--------------------Oracle  Attributes -------------------------
--------------------Dataware Attributes -------------------------
PAL_SBU AS
(
    SELECT 
    PAL_CD,
    NVL(SBU_SHORT_DESC,' ') AS SBU_SHORT_DESC
    FROM {{source ('STG_DWH_DATAWARE','PAL')}}
    QUALIFY( row_number() OVER (PARTITION BY PAL_CD ORDER BY BIW_UPD_DTTM DESC)=1)  

),
---------------------------------DOCSERV--------------------------------------------------
STG_DOCSERV AS
(
    SELECT
        DOCUMENT_NUMBER,
        DOCUMENT_LATEST_REVISION
    FROM {{source ('STG_DOCSERV','DOCUMENT')}}  
  WHERE JRN_FLAG IN ('I', 'U')
  QUALIFY( ROW_NUMBER() OVER (PARTITION BY DOCUMENT_NUMBER ORDER BY JRN_DATE DESC, BIW_UPD_DTTM DESC) =1)
),


STG1_PROD_DLY AS
(
    SELECT
        PRODUCT_ID,
        DOC_NUM
    FROM {{source ('STG_MAINFRAME','STG1_PRODUCT_DAILY')}} 
QUALIFY( row_number() OVER (PARTITION BY PRODUCT_ID  ORDER BY BIW_UPD_DTTM DESC)=1) 
),

FSP_DATE AS
(
    SELECT 
        PROJECT_NUMBER,
        PROJECT_ID,        
        MS_NAME,
        NVL(ACT_END_DATE,DATE('01-01-1990', 'MM-DD-YYYY') ) AS FSP_DATE
    FROM 
        (Select 
		PROJECT_NUMBER,
        PROJECT_ID,        
        MS_NAME,
		ACT_END_DATE
		from {{source ('STG_PPM_ON02_NPD_MARTS','DIM_PPM_MILESTONE_DTL')}}
        QUALIFY( ROW_NUMBER() OVER (PARTITION BY PROJECT_NUMBER,MS_NAME ORDER BY BIW_UPD_DTTM DESC) =1))
    WHERE 
        MS_NAME='FIRST SHIP PROTOTYPES (MILESTONE)'
)

SELECT 
    PART.PART_ID,
    PART.EFFECTIVE_DATE ,
    PART.PART_DESCRIPTION,
    'AGILE' AS PART_SOURCE,
    PART.LEGACY_PART_ID,
    PART.PAL1_CODE,
    PART.PAL2_CODE,    
    PART.PAL3_CODE,
    PART.PAL4_CODE,    
    PART.PART_CLASS_CODE,
    PART.PART_CLASS_DESCRIPTION,
    PART.AEC_QUALIFIED_CODE,
    PART.CASE_OUTLINE_CODE,
    PART.COMMODITY_CODE,
    PART.ECAT_CODE,
    PART.ECCN_CODE,
    PART.ERP_RESOURCE_ASY_CODE,
    PART.ERP_RESOURCE_ASY_DESCRIPTION, 
    PART.ERP_RESOURCE_BSP_CODE,
    PART.ERP_RESOURCE_FAB_CODE,
    PART.ERP_RESOURCE_FSP_CODE,
    PART.ERP_RESOURCE_MEF_CODE,
    PART.ERP_RESOURCE_SWF_CODE,
    PART.ERP_RESOURCE_TST_CODE,
    PART.MSL_VALUE,
    PART.MSL_TEMPERATURE,
    PART.PART_RELEASE_STATUS_CODE,
    PART.PART_RELEASE_STATUS_DESCRIPTION,
    Coalesce(PART.PART_SPEC_ID,PROD_DLY.DOC_NUM,' ') AS PART_SPEC_ID,
    PART.QUALITY_LVL_CODE,
    PART.QUALITY_LVL_TARGET_MARKET_DESCRIPTION,
    PART.PDPW_VALUE,
    PART.IS_UL_LISTED,
    UPPER(PART.UOM_OPERATIONS_CODE) AS UOM_OPERATIONS_CODE,
    PART.WAFER_SIZE_VALUE,
    PART.LAST_ORDER_DATE,
    PART.LAST_SHIP_DATE,
    PART.NEW_PART_DEFINITION_DATE,
    PART.NEW_PART_EXP_DATE,
    PART.PART_RELEASE_PRODUCTION_DATE,
    PART.IS_BURN_IN,
    PART.BUY_SELL_CODE,
    PART.IS_CUSTOM_ELEC_TEST,
    PART.IS_CUSTOM_MARK_ONLY,
    PART.IS_CUSTOMER_CONSIGN_TO_ON,
    PART.IS_ENG_PART,
    PART.IS_HALIDE_FREE,
    PART.IS_ITAR,
    PART.LEADED_DIE_ATTACH_CODE,
    PART.MILITARY_COMPLIANCE_CODE,
    PART.IS_OPN,
    PART.IS_PB_FREE_LEADS,
    PART.ROHS_CHINA_CODE,
    PART.ROHS_EU_EXEMPTION_CODE,
    PART.ROHS_EU_CODE,
    PART.SAMPLE_ALLOW_CODE,
    PART.SOQ_QUANTITY, 
    PART.IS_VALUED_PART,
    PART.CREATE_BY,
    PART.CREATE_DATE,
    PART.PART_TYPE_DESCRIPTION,
    PART.PART_SUB_TYPE_CD,
    PART.LIFECYCLE_PHASE_DESCRIPTION,
    PART.MARKET_PART_LIFECYCLE_DESCRIPTION,
    PART.PACKING_CONFIG_ID,
    PART.PART_OWNER_DESCRIPTION,
    PART.CORE_PART_NO_CONFIG_ID,
    PART.SAFE_LAUNCH_CODE,
    PART.DESIGN_TYPE_DESC,
    PART.MKT_SEG_SUBSEG_EUC_PRI_DESC,
    PART.WSTS_CD,
    PART.PROJECT_NUMBER_CD,
    PART.CASE_OUTLINE_ID,
    PART.DIE_DESIGN_CONFIG_ID,
    PART.WAFER_BACKSIDE_VAR_ID,
    PART.WAFER_FRONTSIDE_VARIANT_ID,
    PART.WAFER_TECH_VARIANT_ID,
    PART.PART_QUALITY_TARGET_MARKET_TYPE,
    PART.PART_QUALITY_TARGET_MARKET_DESCRIPTION,
    PART.LEGACY_COMPANY_NAME,
    PART.SUPPLY_CHN_PLNG_CODE, 
    PART.ANCHOR_STAR_PRODUCT_CODE,
    PART.MARKET_PN,
    PART.IS_MARKET_PN,
    PART.ENG_PKG_VAR_ID,
    PART.FLOW_CODE, 
    PART.IS_SPEC_CNTRL_BOM,
    PART.PPAP_CAPABLE_CODE,
    PART.CUST_SPEC_CONTROLLED_CODE,
    PART.ENGG_CHNG_ORDER_ID,
    PART.AEC_QUAL,
    PART.GLOBAL_PART_ID,
    PART.PART_OWNER_NAME,
    PART.ENG_PKG_CODE,
    PART.IS_CONTAIN_ENCRYPT,
    PART.SOLUTION_SELLING_TYPE,
    PART.MFG_PART_ID,
    PART.IS_PB_FREE_PART,
    PART.PB_FREE_PART_DESCRIPTION,
    PART.PB_FREE_PART_EXEMPT,
    PART.IS_LABEL_SYMBOL_ROHS_EU,
    PART.IS_LABEL_SYMBOL_ROHS_CHINA, 
    PART.LABEL_SYMBOL_ROHS_CHINA_VALUE,
    PART.IS_LABEL_SYMBOL_PBFREE_2LI,
    PART.IS_LABEL_SYMBOL_2LI,
    PART.IS_LABEL_SYMBOL_ECAT,
    PART.IS_LABEL_SYMBOL_HALIDE_FREE,
    PART.IS_LABEL_SYMBOL_RU,
    PART.LABEL_SYMBOL_ECAT_CODE,
    PART.PACKAGE_CODE_DESCRIPTION,
    PART.PART_REL_FCST_DATE, 
    PART.SUBJECT_EXPORT_ADMIN_REG,
    CASE
    WHEN PART.IS_PB_FREE_LEADS = 'Y'
            AND PART.LEADED_DIE_ATTACH_CODE = 'N' THEN 'None'
    WHEN PART.IS_PB_FREE_LEADS = 'Y'
        AND PART.LEADED_DIE_ATTACH_CODE = 'Y' THEN 'Taken'
                        ELSE NULL
    END AS EXEMPTIONS, 
    COALESCE(TRY_TO_BOOLEAN(CASE 
        WHEN PART.LEAD_FINISH_CATEGORY_ECAT = 'NA'
        OR PART.LEAD_FINISH_CATEGORY_ECAT = '00'
        OR PART.LEADED_DIE_ATTACH_CODE = 'Y' THEN 'N'
                        ELSE 'Y' END),'FALSE')::BOOLEAN AS IS_ROHS,

----- Hardcoded value----------
    'UNK' AS EXPERT_DATA_SOURCE_NAME,    

--------------PACK_CONFIG---------------------------------------
    COALESCE(CASE 
    WHEN PART.MPQ_PRI_CONTAINER_QUANTITY IS not null
     THEN PART.MPQ_PRI_CONTAINER_QUANTITY 
     ELSE PACK_CONFIG.PRI_CONT_QTY_MPQ 
     END,0)::NUMBER AS MPQ_PRI_CONTAINER_QUANTITY,
    COALESCE(PACK_CONFIG.MPQ_PRI_CONTAINER_CODE, ' ') AS MPQ_PRI_CONTAINER_CODE,
    COALESCE(try_to_boolean(CASE 
        WHEN PACK_CONFIG.MPQ_PRI_CONTAINER_CODE IS NULL THEN 'N' 
        WHEN PACK_CONFIG.MPQ_PRI_CONTAINER_CODE IN ('REEL', 'DSFTP', 'DEMTP') THEN 'Y' 
        ELSE 'N' 
    END),'FALSE')::BOOLEAN AS IS_TAPE_REEL,

-----------------CUST_CONFIG---------------------------------------
    COALESCE(CUST_CONFIG.HTS_EU_CODE,' ') AS HTS_EU_CODE,
    COALESCE(CUST_CONFIG.HTS_US_CODE,' ') AS HTS_US_CODE,
    COALESCE(CUST_CONFIG.HTS_US_CODE_DESCRIPTION,' ') AS HTS_US_CODE_DESCRIPTION,
    TRUNC(COALESCE(CUST_CONFIG.LAST_CHANGE_DATE,to_date('1-1-1900', 'MM-DD-YYYY')),'DD') AS LAST_CHANGE_DATE,
    COALESCE(CUST_CONFIG.HTS_EU_8_CODE,' ') AS HTS_EU_8_CODE, 

------------------CASE_OUTLINE And Package---------------
    NVL(OUTLINE.PACKAGE_TYPE_ID,' ') AS ENG_PKG_TYPE_DESC,
    PKG_TYPE.ENG_PKG_FAM AS ENG_PKG_FAM_DESC,

-------------------WAFER_VAR----------------------------------
    NVL(WAFER_VAR.WAFER_TECH_TYPE_ID, ' ') AS WAFER_TECH_TYPE_ID,
----------------------WAFER_FAM-----------------------------------
    NVL(WAFER_FAM.WAFER_TECH_FAM_ID, ' ') WAFER_TECH_FAM_ID,

-----------------GPS Owner-----------------------------------
    CASE WHEN GPS_PRICE_OUT.PROGRAM_CD='G' AND GPS_PRICE_OUT.PRICE_BOOK_FLG='Y'
         THEN 1
         ELSE 0
    END::BOOLEAN AS IS_ON_TARGET,
    GPS_PRICE_OUT.ONPN,
    GPS_PRICE_OUT.PROGRAM_CD AS PART_PROGRAM_CODE, 
    COALESCE(TRY_TO_BOOLEAN(GPS_PRICE_OUT.NCNR_FLG),'FALSE')::BOOLEAN AS IS_NCNR,
    GPS_PRICE_OUT.STEP_PRICE_FLG ,
    GPS_PRICE_OUT.MARKET_CD,
    NVL(GPS_PRICE_OUT.PRICE_BOOK_FLG,' ') AS PRICE_BOOK_FLG,
    COALESCE(TRY_TO_BOOLEAN(GPS_PRICE_OUT.PRICE_BOOK_FLG),'FALSE')::BOOLEAN AS IS_PRICE_BOOK,  

----------------EBS Attributes----------------
    NVL(PAL_HIERARCHY.BU_CD,' ') AS BUSINESS_UNIT_CODE,
    NVL(PAL_HIERARCHY.GROUP_CD,' ') AS GROUP_CODE,
    NVL(PAL_HIERARCHY.GROUP_DESC,' ') AS GROUP_DESCRIPTION,
    NVL(PAL_HIERARCHY.DIV_CD,' ') AS DIVISION_CODE,
    NVL(PAL_HIERARCHY.DIV_DESC,' ') AS DIVISION_DESCRIPTION,
    NVL(PAL_HIERARCHY.BU_DESC,' ') AS BUSINESS_UNIT_DESCRIPTION,
    NVL(PAL_HIERARCHY.OPR_CD,' ') AS OPERTNL_CODE,
    NVL(PAL_HIERARCHY.OPR_DESC,' ') AS OPERTNL_DESC,

---------------MainFrame Description for PAL Code --------------
    PAL2_DESC.PAL_DESCRIPTION AS PAL2_DESCRIPTION,
    PAL3_DESC.PAL_DESCRIPTION AS PAL3_DESCRIPTION,
    PAL4_DESC.PAL_DESCRIPTION AS PAL4_DESCRIPTION,

------------APS Attributes -----------------------
    STAGE_CD.STAGE AS DEFLT_APS_STAGE_CD,
    STAGE_CD.FE_BE_FLG AS DEFLT_FE_BE_CD,

--------------------DWH_IO Attributes -------------------------
    STG_ITEM.PRODUCT_LIFECYCLE_STAGE AS PART_AVAILABILITY_STATUS_CODE,

--------------------Dataware Attributes -------------------------
    SBU.SBU_SHORT_DESC AS SBU_SHORT_DESCRIPTION,

-------------Contact Ramya -----------------------
  --  NVL(RFORECASTING.PRIMARY_CONSTR_RESGROUP,'') AS CAPC_CONSTR_PRIM_CONSTR_RG,

------------STG_DOCSERV---------------------
    NVL(DOCUMENT_LATEST_REVISION,' ') AS DOCUMENT_ISSUE,    
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}} as BIW_BATCH_ID,
    -- Required for next level filter
    PART.JRN_FLAG,
    NVL(FSP_DT.FSP_DATE ,DATE('01-01-1900', 'MM-DD-YYYY')) AS FSP_DATE
FROM PART_S PART 
---------  -PRODCENT Attributes ------------
LEFT OUTER JOIN PACKING_CONFIGURATION PACK_CONFIG
    ON PART.PACKING_CONFIG_ID = PACK_CONFIG.PACKING_CONFIG_ID
     
LEFT OUTER JOIN CUSTOMS_CONFIG CUST_CONFIG
    ON PART.CUSTOMS_CONFIG_ID = CUST_CONFIG.CUSTOMS_CONFIG_ID

LEFT OUTER JOIN CASE_OUTLINE OUTLINE
    ON PART.CASE_OUTLINE_ID = OUTLINE.CASE_OUTLINE_ID

LEFT OUTER JOIN ENG_PKG_TYPE PKG_TYPE
    ON OUTLINE.PACKAGE_TYPE_ID=PKG_TYPE.PACKAGE_TYPE_ID

LEFT OUTER JOIN WAFER_TECH_VARIANT WAFER_VAR
    ON PART.WAFER_TECH_VARIANT_ID = WAFER_VAR.WAFER_TECH_VARIANT_ID
LEFT OUTER JOIN ENG_WAFER_TECH WAFER_FAM
    ON PART.WAFER_TECH_VARIANT_ID = WAFER_FAM.WAFER_TECH_TYPE_ID

----------PRODCENT Attributes  END------------

-----------------GPS Owner-----------------------------------
LEFT OUTER JOIN STG_PRICE_OUT GPS_PRICE_OUT
ON PART.PART_ID = GPS_PRICE_OUT.ONPN

----------------EBS Attributes----------------
LEFT OUTER JOIN XXON_PAL_HIERARCHY PAL_HIERARCHY 
    ON PART.PAL3_CODE = PAL_HIERARCHY.PAL3_CD

---------------MainFrame Description for PAL Code --------------
LEFT OUTER JOIN PAL_CODE_DESC  PAL2_DESC
    ON PART.PAL2_CODE=PAL2_DESC.PAL_CODE

LEFT OUTER JOIN PAL_CODE_DESC  PAL3_DESC
    ON PART.PAL3_CODE=PAL3_DESC.PAL_CODE

LEFT OUTER JOIN PAL_CODE_DESC  PAL4_DESC
    ON PART.PAL4_CODE=PAL4_DESC.PAL_CODE

-------------- APS Attributes -----------
LEFT OUTER JOIN AGL_APS_STAGE_XREF STAGE_CD
    ON PART.PART_SUB_TYPE_CD=STAGE_CD.TARGET_SUBTYPE

--------------------DWH_IO Attributes -------------------------
LEFT OUTER JOIN STG_DWH_IO STG_ITEM
    ON PART.PART_ID=STG_ITEM.ITEM

--------------------Dataware Attributes -------------------------
LEFT OUTER JOIN PAL_SBU SBU
    ON PART.PAL4_CODE=SBU.PAL_CD
LEFT OUTER JOIN STG_DOCSERV DOCSERV
    ON PART.PART_SPEC_ID = DOCSERV.DOCUMENT_NUMBER
LEFT OUTER JOIN STG1_PROD_DLY PROD_DLY
    ON PART.PART_ID=PROD_DLY.PRODUCT_ID
LEFT OUTER JOIN FSP_DATE FSP_DT
    ON PART.PROJECT_NUMBER_CD=FSP_DT.PROJECT_NUMBER
