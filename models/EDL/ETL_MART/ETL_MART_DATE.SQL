/*---------------------------------------------------------------------------
Command to run model:
--dbt build --select ETL_MART_DATE

Version     Date            Author              Description
-------     --------        -----------        ----------------------------------
1.0         06 DEV 2022     Kali Dandapani     Initial Version: Porting from airflow to dbt
---------------------------------------------------------------------------*/

{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['DATE_KEY']-%}
{% if is_incremental() %}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
--DBT Variable
--SELECT {{v_all_column_list}}
--SELECT {{v_md5_column_list}}
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_DATE'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}

{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building table DATE dimension'
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART'
        ,alias='DATE'
		,unique_key= v_pk_list
        ,tags =['MART']
		,post_hook= [v_sql_upd_success_batch]	
        )
}}

WITH 
FISCAL_PERIOD_CNT AS
(   
    SELECT 
        FISCAL_PRD,
        COUNT(*) TOTAL_FISCAL_WEEKS_IN_FISCAL_MONTH
    FROM (
        SELECT 
            FISCAL_PRD
        FROM {{ source('STG_DWH_BIWSTAGE', 'DATE_DIM_FISCAL') }}
        GROUP BY 
            FISCAL_PRD, 
            FISCAL_WK
        )
    GROUP BY 
        FISCAL_PRD
    ORDER BY 
    FISCAL_PRD
),

FISCAL_PRI_VAL AS 
(
    SELECT 
        DISTINCT FISCAL_QTR,
        4*(FISCAL_YR - 1970) + MOD(FISCAL_QTR, 10) - 1 FISCAL_QUARTER_SEQUENCE
    FROM {{ source('STG_DWH_BIWSTAGE', 'DATE_DIM_FISCAL') }}
),

CALNDR_DT AS 
(
    SELECT 
        CALNDR_DT, 
        FISCAL_YR, 
        FISCAL_WK, 
        FISCAL_QTR, 
        FISCAL_PRD 
        /*,
        RANK() OVER (PARTITION BY  ORDER BY CALNDR_DT ASC)  FW_B_RN,
        RANK() OVER (PARTITION BY  ORDER BY CALNDR_DT DESC)  FW_E_RN,
        RANK() OVER (PARTITION BY FISCAL_PRD ORDER BY CALNDR_DT ASC)  FM_B_RN,
        RANK() OVER (PARTITION BY FISCAL_PRD ORDER BY CALNDR_DT DESC)  FM_E_RN,
        RANK() OVER (PARTITION BY FISCAL_QTR ORDER BY CALNDR_DT ASC)  FQ_B_RN,
        RANK() OVER (PARTITION BY FISCAL_QTR ORDER BY CALNDR_DT DESC)  FQ_E_RN,
        RANK() OVER (PARTITION BY FISCAL_YR ORDER BY CALNDR_DT ASC)  FY_B_RN,
        RANK() OVER (PARTITION BY FISCAL_YR ORDER BY CALNDR_DT DESC)  FY_E_RN*/
    FROM 
      {{ source('STG_DWH_BIWSTAGE', 'DATE_DIM_FISCAL') }}
    ORDER BY 
        CALNDR_DT
),

FISCAL_PRIOR AS 
(
    SELECT 
        CAST(TO_CHAR(CALNDR_DT, 'YYYYMMDD') AS INT) DATE_KEY,
        CALNDR_DT CALENDAR_DATE,

        CASE 
            WHEN MOD(FISCAL_WK, 100) = 1 
                THEN (FISCAL_YR - 1) * 100 + 52
            ELSE FISCAL_WK - 1 
        END AS FISCAL_WEEK_PRIOR,

        CASE 
            WHEN MOD(FISCAL_PRD, 100) = 1 
                THEN (FISCAL_YR - 1) * 100 + 12
            ELSE FISCAL_PRD - 1 
        END AS  FISCAL_MONTH_PRIOR,

        CASE 
            WHEN MOD(FISCAL_QTR, 10) = 1 
                THEN (FISCAL_YR - 1) * 10 + 4
            ELSE FISCAL_QTR - 1 
        END AS FISCAL_QUARTER_PRIOR,
        --- PLEASE ADD MONTH AND QUARTER IF REQURIED FOR ANALYSIS
        FISCAL_WK FISCAL_WEEK,
        MIN(CALNDR_DT) OVER (PARTITION BY FISCAL_WK) FISCAL_WEEK_BEGIN_DATE,
        MAX(CALNDR_DT) OVER (PARTITION BY FISCAL_WK) FISCAL_WEEK_END_DATE
    FROM  {{ source('STG_DWH_BIWSTAGE', 'DATE_DIM_FISCAL') }}
),

FISCAL_PRIOR_WEEK  AS
(
    SELECT 
        DISTINCT
        PRIOR_SET.CALENDAR_DATE,
        MIN(PRIOR_WEEK.CALNDR_DT) OVER (PARTITION BY PRIOR_WEEK.FISCAL_WK) FISCAL_WEEK_PRIOR_BEGIN_DATE,
        MAX(PRIOR_WEEK.CALNDR_DT) OVER (PARTITION BY PRIOR_WEEK.FISCAL_WK) FISCAL_WEEK_PRIOR_END_DATE
    FROM 
        FISCAL_PRIOR PRIOR_SET
        INNER JOIN CALNDR_DT PRIOR_WEEK
        ON PRIOR_SET.FISCAL_WEEK_PRIOR = PRIOR_WEEK.FISCAL_WK
),

FISCAL_PRIOR_MONTH AS 
(
    SELECT 
        DISTINCT
        PRIOR_SET.CALENDAR_DATE,
        MIN(PRIOR_MONTH.CALNDR_DT) OVER (PARTITION BY PRIOR_MONTH.FISCAL_PRD)  FISCAL_MONTH_PRIOR_BEGIN_DATE,
        MAX(PRIOR_MONTH.CALNDR_DT) OVER (PARTITION BY PRIOR_MONTH.FISCAL_PRD) FISCAL_MONTH_PRIOR_END_DATE
    FROM 
        FISCAL_PRIOR PRIOR_SET
        INNER JOIN CALNDR_DT PRIOR_MONTH
        ON PRIOR_SET.FISCAL_MONTH_PRIOR = PRIOR_MONTH.FISCAL_PRD
),

FISCAL_PRIOR_QUARTER AS
(
    SELECT 
        DISTINCT
        PRIOR_SET.CALENDAR_DATE,
        MIN(PRIOR_QUARTER.CALNDR_DT) OVER (PARTITION BY PRIOR_QUARTER.FISCAL_QTR) FISCAL_QUARTER_PRIOR_BEGIN_DATE,
        MAX(PRIOR_QUARTER.CALNDR_DT) OVER (PARTITION BY PRIOR_QUARTER.FISCAL_QTR) FISCAL_QUARTER_PRIOR_END_DATE
    FROM 
        FISCAL_PRIOR PRIOR_SET
        INNER JOIN CALNDR_DT PRIOR_QUARTER
            ON PRIOR_SET.FISCAL_QUARTER_PRIOR = PRIOR_QUARTER.FISCAL_QTR
)
    
SELECT  
    DISTINCT 
    CAST( TO_CHAR(X.CALNDR_DT, 'YYYYMMDD') AS INT  ) AS DATE_KEY, 
    X.CALNDR_DT as CALENDAR_DATE, 
    DAY(X.CALNDR_DT) AS  DAY_NUMBER, 
    DAYNAME(X.CALNDR_DT) AS  DAY_OF_WEEK_SHORT_DESCRIPTION, 
    DECODE(
        DAYNAME(X.CALNDR_DT), 
        'Mon',   'Monday', 
        'Tue',   'Tuesday', 
        'Wed',   'Wednesday', 
        'Thu',   'Thursday', 
        'Fri',   'Friday', 
        'Sat',   'Saturday', 
        'Sun',   'Sunday'
    ) AS DAY_OF_WEEK_DESCRIPTION, 
    NOT(
       DAYNAME(X.CALNDR_DT) IN ('Sat', 'Sun')
    ) AS IS_WEEKDAY, 
    (
    DAYNAME(X.CALNDR_DT) IN ('Sat', 'Sun')
    ) AS IS_WEEKEND, 
    X.CALNDR_DT = MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_WK) IS_BEGIN_FISCAL_WEEK, 
    X.CALNDR_DT = MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_WK) IS_END_FISCAL_WEEK, 
    X.CALNDR_DT = MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_PRD) IS_BEGIN_FISCAL_MONTH, 
    X.CALNDR_DT = MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_PRD) IS_END_FISCAL_MONTH, 
    X.CALNDR_DT = MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_QTR) IS_BEGIN_FISCAL_QUARTER, 
    X.CALNDR_DT = MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_QTR) IS_END_FISCAL_QUARTER, 
    X.CALNDR_DT = MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_YR) IS_BEGIN_FISCAL_YEAR, 
    X.CALNDR_DT = MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_YR) IS_END_FISCAL_YEAR, 
    X.CALNDR_DT - TO_DATE('19700101', 'YYYYMMDD') DATE_SEQUENCE, 
    RANK() OVER ( PARTITION BY X.FISCAL_WK  ORDER BY X.CALNDR_DT ASC ) DAY_IN_FISCAL_WEEK, 
    RANK() OVER ( PARTITION BY X.FISCAL_PRD ORDER BY X.CALNDR_DT ASC ) DAY_IN_FISCAL_MONTH, 
    RANK() OVER ( PARTITION BY X.FISCAL_QTR ORDER BY X.CALNDR_DT ASC ) DAY_IN_FISCAL_QUARTER, 
    RANK() OVER ( PARTITION BY X.FISCAL_YR  ORDER BY X.CALNDR_DT ASC ) DAY_IN_FISCAL_YEAR, 
    DAYOFMONTH(X.CALNDR_DT) DAY_IN_MONTH, 
    --X.CALNDR_DT - TO_DATE(TO_CHAR(X.CALNDR_DT, 'YYYY')||'0101', 'YYYYMMDD') + 1 DAY_IN_QUARTER,
    X.CALNDR_DT - 
        TO_DATE( 
                TO_CHAR(X.CALNDR_DT, 'YYYY')
                || LPAD( CAST( QUARTER(X.CALNDR_DT)* 3 - 2 AS INT), 2,0 )
                || '01'
                , 'YYYYMMDD'
                ) 
        + 1 AS DAY_IN_QUARTER, 
    DAYOFYEAR(X.CALNDR_DT) DAY_IN_YEAR, 
    CAST ( TO_CHAR (X.CALNDR_DT, 'YYYYMM') AS INT ) MONTH_KEY, 
    YEAR(X.CALNDR_DT) || 'M' || MONTH(X.CALNDR_DT) MONTH, 
    CAST (  MONTH(X.CALNDR_DT) AS INT   ) MONTH_NUMBER, 
    MONTHNAME(X.CALNDR_DT) MONTH_SHORT_DESCRIPTION, 
    TO_CHAR (X.CALNDR_DT, 'MMMM') MONTH_DESCRIPTION, 
    TO_DATE(TO_CHAR(X.CALNDR_DT, 'YYYYMM')|| '01', 'YYYYMMDD') MONTH_BEGIN_DATE, 
    LAST_DAY(X.CALNDR_DT, MONTH) MONTH_END_DATE, 
    LAST_DAY(X.CALNDR_DT, MONTH) - 
        TO_DATE( TO_CHAR(X.CALNDR_DT, 'YYYYMM')|| '01','YYYYMMDD')
         + 1 
        AS TOTAL_DAYS_IN_MONTH, 
    12 
        * (CAST(YEAR(X.CALNDR_DT) AS INT) -1970) 
        + (CAST(MONTH(X.CALNDR_DT) AS INT) -1)
    AS MONTH_SEQUENCE, 
    CASE 
        WHEN MOD(MONTH(X.CALNDR_DT), 3) = 0 
            THEN 3 
        ELSE MOD(MONTH(X.CALNDR_DT), 3) 
    END MONTH_IN_QUARTER, 
    CAST(MONTH(X.CALNDR_DT) AS INT ) MONTH_IN_YEAR, 
    CAST(YEAR(X.CALNDR_DT) || QUARTER(X.CALNDR_DT) AS INT) QUARTER_KEY, 
    YEAR(X.CALNDR_DT) || 'Q' || QUARTER(X.CALNDR_DT) QUARTER, 
    CAST(QUARTER(X.CALNDR_DT) AS INT ) QUARTER_NUMBER, 
    'Q' || QUARTER(X.CALNDR_DT) QUARTER_DESCRIPTION, 
    --TO_DATE(TO_CHAR(X.CALNDR_DT, 'YYYY')||CAST(QUARTER(X.CALNDR_DT)*3-2 AS INT)||'01', 'YYYYMMDD') QUARTER_BEGIN_DATE,
    TO_DATE(
            TO_CHAR(X.CALNDR_DT, 'YYYY')
            || LPAD(CAST( QUARTER(X.CALNDR_DT)* 3 - 2 AS INT), 2, 0)
            || '01'
            ,'YYYYMMDD'
            ) AS QUARTER_BEGIN_DATE, 
    LAST_DAY(X.CALNDR_DT, QUARTER) QUARTER_END_DATE, 
    LAST_DAY(X.CALNDR_DT, QUARTER) 
        - TO_DATE(
                    TO_CHAR(X.CALNDR_DT, 'YYYY')
                    || LPAD(CAST(QUARTER(X.CALNDR_DT)* 3 - 2 AS INT), 2, 0    )
                    || '01'
                ,'YYYYMMDD'
                )
         + 1 
    AS TOTAL_DAYS_IN_QUARTER, 
    3 TOTAL_MONTHS_IN_QUARTER, 
    4   *   ( CAST(YEAR(X.CALNDR_DT) AS INT ) -1970 ) 
        +   (CAST(QUARTER(X.CALNDR_DT) AS INT) -1   ) 
    AS QUARTER_SEQUENCE, 
    CAST(QUARTER(X.CALNDR_DT) AS INT) QUARTER_IN_YEAR, 
    CAST (YEAR(X.CALNDR_DT) AS INT ) YEAR_KEY, 
    CAST (YEAR(X.CALNDR_DT) AS INT ) YEAR, 
    'CY' || YEAR(X.CALNDR_DT) YEAR_DESCRIPTION, 
    TO_DATE(
            TO_CHAR(X.CALNDR_DT, 'YYYY')|| '0101'
            , 'YYYYMMDD'
            ) YEAR_BEGIN_DATE, 
    LAST_DAY(X.CALNDR_DT, YEAR) YEAR_END_DATE, 
    LAST_DAY(X.CALNDR_DT, YEAR) 
        - TO_DATE(  
                    TO_CHAR(X.CALNDR_DT, 'YYYY')
                    || '0101'
                ,'YYYYMMDD') 
        + 1 AS TOTAL_DAYS_IN_YEAR, 
    12 TOTAL_MONTHS_IN_YEAR, 
    4 TOTAL_QUARTERS_IN_YEAR, 
    CAST( YEAR(X.CALNDR_DT) AS INT ) -1970 YEAR_SEQUENCE, 
    X.FISCAL_WK FISCAL_WEEK_KEY, 
    --RANK() OVER (PARTITION BY X.FISCAL_WK ORDER BY X.CALNDR_DT ASC) FISCAL_WEEK,
    X.FISCAL_WK FISCAL_WEEK, 
    MOD(X.FISCAL_WK, 100) FISCAL_WEEK_NUMBER, 
    MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_WK) FISCAL_WEEK_BEGIN_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_WK) FISCAL_WEEK_END_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_WK) - MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_WK) + 1 TOTAL_DAYS_IN_FISCAL_WEEK, 
    52 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_WK, 100) -1 FISCAL_WEEK_SEQUENCE, 
    CASE 
        WHEN MOD(MOD(X.FISCAL_WK, 100),TOTAL_FISCAL_WEEKS_IN_FISCAL_MONTH) = 0 
            THEN TOTAL_FISCAL_WEEKS_IN_FISCAL_MONTH 
        ELSE MOD(MOD(X.FISCAL_WK, 100), TOTAL_FISCAL_WEEKS_IN_FISCAL_MONTH)
    END FISCAL_WEEK_IN_FISCAL_MONTH, 
    CASE 
        WHEN MOD(MOD(X.FISCAL_WK, 100), 13) = 0 
            THEN 13 
        ELSE MOD(MOD(X.FISCAL_WK, 100),13)
    END FISCAL_WEEK_IN_FISCAL_QUARTER, 
    MOD(X.FISCAL_WK, 100) FISCAL_WEEK_IN_FISCAL_YEAR, 
    CASE 
        WHEN MOD(MOD(X.FISCAL_WK, 100), 13) = 0 
            THEN 13 
        ELSE MOD(MOD(X.FISCAL_WK, 100), 13) 
    END CRAWL_WEEK_IN_FISCAL_QUARTER, 
    CASE 
        WHEN MOD(MOD(X.FISCAL_WK, 100), 13) = 0 
            THEN 13 
        ELSE MOD(MOD(X.FISCAL_WK, 100), 13) 
    END - 13  AS CRAWL_WEEK_IN_FISCAL_QUARTER_PLUS_1, 
    --CASE WHEN MOD( MOD(X.FISCAL_WK, 100), 13 ) = 0 THEN 13 ELSE MOD( MOD(X.FISCAL_WK, 100), 13 ) END  - X.FISCAL_QTR CRAWL_WEEK_IN_FISCAL_QUARTER_PLUS_1,
    CASE 
        WHEN MOD(MOD(X.FISCAL_WK, 100), 13) = 0 
            THEN 13 
        ELSE MOD(MOD(X.FISCAL_WK, 100), 13) 
    END -2 * 13 CRAWL_WEEK_IN_FISCAL_QUARTER_PLUS_2, 
    --CASE WHEN MOD( MOD(X.FISCAL_WK, 100), 13 ) = 0 THEN 13 ELSE MOD( MOD(X.FISCAL_WK, 100), 13 ) END  - 2*X.FISCAL_QTR CRAWL_WEEK_IN_FISCAL_QUARTER_PLUS_2,
    X.FISCAL_PRD FISCAL_MONTH_KEY, 
    X.FISCAL_PRD FISCAL_MONTH, 
    MOD(X.FISCAL_PRD, 100) FISCAL_MONTH_NUMBER, 
    MONTHNAME(
            TO_DATE(TO_CHAR(X.FISCAL_PRD) || '01', 'YYYYMMDD')
            ) 
        || SUBSTR(TO_CHAR(X.FISCAL_PRD), 3, 2 )
    AS FISCAL_MONTH_DESCRIPTION, 
    MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_PRD) FISCAL_MONTH_BEGIN_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_PRD) FISCAL_MONTH_END_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_PRD) - MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_PRD) + 1 TOTAL_DAYS_IN_FISCAL_MONTH, 
    TOTAL_FISCAL_WEEKS_IN_FISCAL_MONTH, 
    12 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_PRD, 100) -1 FISCAL_MONTH_SEQUENCE, 
    CASE 
        WHEN MOD(MOD(X.FISCAL_PRD, 100), 3) = 0 
            THEN 3 
        ELSE MOD(MOD(X.FISCAL_PRD, 100), 3) 
    END FISCAL_MONTH_IN_FISCAL_QUARTER, 
    MOD(X.FISCAL_PRD, 100) FISCAL_MONTH_IN_FISCAL_YEAR, 
    X.FISCAL_QTR FISCAL_QUARTER_KEY, 
    X.FISCAL_QTR FISCAL_QUARTER, 
    CAST(
            SUBSTR(TO_CHAR(X.FISCAL_QTR), 1, 4) 
            || '0' 
            || SUBSTR(TO_CHAR(X.FISCAL_QTR), 5, 1) 
        AS INT) AS FISCAL_QUARTER_YYYYQQ, 
    MOD(X.FISCAL_QTR, 10) FISCAL_QUARTER_NUMBER, 
    'Q' 
        || SUBSTR( TO_CHAR(X.FISCAL_QTR), 5, 1) 
        || SUBSTR( TO_CHAR(X.FISCAL_QTR), 3, 2)
    AS FISCAL_QUARTER_DESCRIPTION, 
    MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_QTR) FISCAL_QUARTER_BEGIN_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_QTR) FISCAL_QUARTER_END_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_QTR) - MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_QTR) + 1 TOTAL_DAYS_IN_FISCAL_QUARTER, 
    --X.FISCAL_QTR TOTAL_FISCAL_WEEKS_IN_FISCAL_QUARTER,
    13 TOTAL_FISCAL_WEEKS_IN_FISCAL_QUARTER, 
    --X.FISCAL_QTR TOTAL_FISCAL_MONTHS_IN_FISCAL_QUARTER,
    3 TOTAL_FISCAL_MONTHS_IN_FISCAL_QUARTER, 
    4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 FISCAL_QUARTER_SEQUENCE, 
    MOD(X.FISCAL_QTR, 10) FISCAL_QUARTER_IN_FISCAL_YEAR, 
    PRIOR_FOUR.FISCAL_QTR FISCAL_QUARTER_PRIOR_FOUR, 
    PRIOR_THREE.FISCAL_QTR FISCAL_QUARTER_PRIOR_THREE, 
    PRIOR_TWO.FISCAL_QTR FISCAL_QUARTER_PRIOR_TWO, 
    PRIOR_ONE.FISCAL_QTR FISCAL_QUARTER_PRIOR, 
    NEXT_ONE.FISCAL_QTR FISCAL_QUARTER_NEXT, 
    NEXT_TWO.FISCAL_QTR FISCAL_QUARTER_NEXT_TWO, 
    NEXT_THREE.FISCAL_QTR FISCAL_QUARTER_NEXT_THREE, 
    NEXT_FOUR.FISCAL_QTR FISCAL_QUARTER_NEXT_FOUR, 
    X.FISCAL_QTR - 10 FISCAL_QUARTER_PRIOR_YEAR, 
    X.FISCAL_YR FISCAL_YEAR_KEY, 
    X.FISCAL_YR FISCAL_YEAR, 
    MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_YR) FISCAL_YEAR_BEGIN_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_YR) FISCAL_YEAR_END_DATE, 
    MAX(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_YR)- MIN(X.CALNDR_DT) OVER (PARTITION BY X.FISCAL_YR)+ 1 TOTAL_DAYS_IN_FISCAL_YEAR, 
    52 TOTAL_FISCAL_WEEKS_IN_FISCAL_YEAR, 
    12 TOTAL_FISCAL_MONTHS_IN_FISCAL_YEAR, 
    4 TOTAL_FISCAL_QUARTERS_IN_FISCAL_YEAR, 
    X.FISCAL_YR - 1970 FISCAL_YEAR_SEQUENCE, 
    X.FISCAL_YR - 1 FISCAL_YEAR_PRIOR, 
    CASE 
        WHEN MOD(X.FISCAL_WK, 100) = 1 
            THEN (X.FISCAL_YR - 1) * 100 + 52 
        ELSE X.FISCAL_WK - 1 
    END FISCAL_WEEK_PRIOR,
    PRIOR_WEEK.FISCAL_WEEK_PRIOR_BEGIN_DATE,
    PRIOR_WEEK.FISCAL_WEEK_PRIOR_END_DATE,
    CASE 
        WHEN MOD(X.FISCAL_PRD, 100) = 1 
            THEN (X.FISCAL_YR - 1) * 100 + 12 
        ELSE X.FISCAL_PRD - 1 
    END AS FISCAL_MONTH_PRIOR,
    PRIOR_MONTH.FISCAL_MONTH_PRIOR_BEGIN_DATE,
    PRIOR_MONTH.FISCAL_MONTH_PRIOR_END_DATE,
    PRIOR_QUARTER.FISCAL_QUARTER_PRIOR_BEGIN_DATE,
    PRIOR_QUARTER.FISCAL_QUARTER_PRIOR_END_DATE,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}} as BIW_BATCH_ID
FROM CALNDR_DT X 
    LEFT OUTER JOIN FISCAL_PERIOD_CNT 
        ON (X.FISCAL_PRD = FISCAL_PERIOD_CNT.FISCAL_PRD) 

    LEFT OUTER JOIN FISCAL_PRI_VAL PRIOR_FOUR 
        ON ( 4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 - 4 = PRIOR_FOUR.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL PRIOR_THREE 
        ON ( 4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 - 3 = PRIOR_THREE.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL PRIOR_TWO 
        ON (4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 - 2 = PRIOR_TWO.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL PRIOR_ONE 
        ON (4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 - 1 = PRIOR_ONE.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL NEXT_ONE 
        ON (4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 + 1 = NEXT_ONE.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL NEXT_TWO 
        ON (4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 + 2 = NEXT_TWO.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL NEXT_THREE 
        ON (4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 + 3 = NEXT_THREE.FISCAL_QUARTER_SEQUENCE) 

    LEFT OUTER JOIN FISCAL_PRI_VAL NEXT_FOUR 
        ON (4 *(X.FISCAL_YR - 1970) + MOD(X.FISCAL_QTR, 10) -1 + 4 = NEXT_FOUR.FISCAL_QUARTER_SEQUENCE)
    --------------- Prior attributes---------------------------------
    LEFT OUTER JOIN FISCAL_PRIOR_WEEK  PRIOR_WEEK
        ON PRIOR_WEEK.CALENDAR_DATE = X.CALNDR_DT

    LEFT JOIN FISCAL_PRIOR_MONTH PRIOR_MONTH
        ON PRIOR_MONTH.CALENDAR_DATE = X.CALNDR_DT

    LEFT JOIN FISCAL_PRIOR_QUARTER PRIOR_QUARTER
        ON PRIOR_QUARTER.CALENDAR_DATE = X.CALNDR_DT
    