/*---------------------------------------------------------------------------
Command to run model:
--dbt build --select ETL_MART_SALES_PRODUCT_CLASSIFICATION_FACT
--dbt build --full-refresh --select ETL_MART_SALES_PRODUCT_CLASSIFICATION_FACT+
--dbt build --full-refresh --select ETL_MART_SALES_PRODUCT_CLASSIFICATION_FACT+  --vars 'is_backfill: True'
Version     Date            Author              Description
-------     --------        -----------         ----------------------------------
1.0         19 Dec 2022      VINAYAKA CN       Initial Version
---------------------------------------------------------------------------*/

{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['MARKET_PRODUCT_NUMBER_KEY']-%}   
{% if is_incremental() %}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
--DBT Variable
--SELECT {{v_all_column_list}}
--SELECT {{v_md5_column_list}}

{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_SALES_PRODUCT_CLASSIFICATION_FACT'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}

{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building table PRODUCT_CLASSIFICATION_FACT for MART_SALES'
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART_SALES'
        ,alias='PRODUCT_CLASSIFICATION_FACT'
		,unique_key= v_pk_list
        ,tags =['MART_SALES']
		,post_hook= [v_sql_upd_success_batch]	
        )
}}

--STEP 1 GET ALL THE PARTS & PRODUCTS
WITH DIM_PRODUCTS AS 
(
    SELECT
       PART_ID AS PRODUCT_ID,
       MARKET_PN AS MARKET_PRODUCT_NUMBER ,
       PART_CLASS_CODE ,
       IS_SPEC_CNTRL_BOM AS IS_CUST_SPEC
    FROM  {{ref('SALES_PRODUCT')}}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY PART_ID ORDER BY BIW_UPD_DTTM DESC)=1) 
)

--STEP 2 GET THE COMPETITOR RAW DATA
,EWPC_ORDERABLE_PART AS
(
    SELECT 
        ORDERABLE_PART ,
        BASE_PART AS WEB_PART_NAME
    FROM {{source ('STG_WEBPRD_PUBLIC','EWPC_ORDERABLE_PART')}}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ORDERABLE_PART ORDER BY BIW_UPD_DTTM DESC)=1)
)

,EWPC_XREF_M1 AS (
    SELECT 
        ORDERABLE_PART ,
        COMPETITOR_PART ,
        REPLACEMENT_TYPE
    FROM 
        {{source('STG_WEBPRD_PUBLIC','EWPC_XREF_M1')}}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ORDERABLE_PART,COMPETITOR_PART,REPLACEMENT_TYPE ORDER BY BIW_UPD_DTTM DESC)=1)
) 

,EWPC_XREF_M1_PART AS (
    SELECT 
        COMPETITOR_PART ,
        COMPETITOR
    FROM 
        {{source('STG_WEBPRD_PUBLIC','EWPC_XREF_M1_PART')}}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY COMPETITOR_PART ORDER BY BIW_UPD_DTTM DESC)=1)
) 

-- STEP 3 : IDENITIFY THE WEEK WHICH NEED SUMMARY DATA
,RUN_WEEK AS 
(
    SELECT 
       DISTINCT FISCAL_WEEK_PRIOR AS FISCAL_WEEK_KEY
    FROM 
    {{source('MART','DATE')}}
    WHERE 
        CALENDAR_DATE>= TRUNC(CURRENT_DATE - INTERVAL '5 YEAR','YEAR')   
        AND CALENDAR_DATE >= '{{V_LWM}}'::DATE-INTERVAL '1 year'
		AND CALENDAR_DATE <= '{{V_HWM}}'::DATE
)

,FISCAL_WEEK_VW AS 
(
    SELECT 
        CALENDAR_DATE,
        MAX(FISCAL_WEEK_KEY) OVER ( ORDER BY 1)  AS FISCAL_WEEK_KEY
    FROM 
    {{source('MART','DATE')}}
    WHERE 
        FISCAL_WEEK_KEY IN (SELECT FISCAL_WEEK_KEY FROM RUN_WEEK )
)

,DIST_FISCAL_WEEK AS (
    SELECT DISTINCT FISCAL_WEEK_KEY  
    FROM 
        FISCAL_WEEK_VW
)

--STEP 4: SUMMARY OF COMPETITOR
,COMPETITOR_SUMMARY AS (
    SELECT 
        PRDCT.PRODUCT_ID,
        DIST_WK.FISCAL_WEEK_KEY ,
        PRDCT.PART_CLASS_CODE,
        PRDCT.IS_CUST_SPEC,
        WEB.WEB_PART_NAME,
        COUNT(DISTINCT 
                CASE
                    WHEN CMPTR_PRT.REPLACEMENT_TYPE = 'Similar' 
                        THEN CMPTR_NM.COMPETITOR
                END
            )    AS COMPETITOR_REPLACEMENT_SIMILAR_COUNT ,
        COUNT(DISTINCT 
                CASE
                    WHEN CMPTR_PRT.REPLACEMENT_TYPE = 'Direct' 
                        THEN CMPTR_NM.COMPETITOR
                END
            )    AS COMPETITOR_REPLACEMENT_DIRECT_COUNT ,
        COUNT(DISTINCT 
                CASE
                    WHEN CMPTR_PRT.REPLACEMENT_TYPE IN ('Direct', 'Similar') 
                        THEN CMPTR_NM.COMPETITOR
                END
            )  AS COMPETITOR_REPLACEMENT_DIRECT_SIMILAR_COUNT
    FROM 
        DIM_PRODUCTS PRDCT 
    LEFT JOIN EWPC_XREF_M1 CMPTR_PRT
        ON PRDCT.PRODUCT_ID = CMPTR_PRT.ORDERABLE_PART
    LEFT JOIN EWPC_XREF_M1_PART CMPTR_NM
        ON CMPTR_PRT.COMPETITOR_PART =  CMPTR_NM.COMPETITOR_PART
    LEFT JOIN EWPC_ORDERABLE_PART WEB 
        ON PRDCT.PRODUCT_ID = WEB.ORDERABLE_PART
    CROSS JOIN DIST_FISCAL_WEEK DIST_WK
    GROUP BY 
        PRDCT.PRODUCT_ID ,
        DIST_WK.FISCAL_WEEK_KEY ,
        PRDCT.PART_CLASS_CODE,
        PRDCT.IS_CUST_SPEC,
        WEB.WEB_PART_NAME
) 

--STEP 5 : GET RAW DATA  SALES REGION , BILLING AND POS
,SALES_REGION  AS 
(
    SELECT 
        CUSTOMER_CODE,
        CASE
            WHEN SALES_REGION_CODE = 'GCHN'
                THEN 'AP'
            ELSE SALES_REGION_CODE
        END AS SALES_REGION_CODE
    FROM {{ref ('SALES_CUSTOMER_DIM')}}
)

,MODELN_CUSTOMER AS (
    SELECT
    OID AS CRM_CUSTOMER_OID,
    ACCOUNT_NUM AS CUSTOMER_CODE,
    CUSTOM_FIELD36 AS BUSINESS_CLASS_CODE,
    CUSTOM_FIELD3 as END_CORPORATION_CODE,
    PARENT_CUSTOMER_OID 
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'CUSTOMER') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUM ORDER BY MODIFIED_DATE DESC, OID DESC)=1)
)
,MODELN_CUST_CORP AS 
(
    SELECT 
        CUST.CRM_CUSTOMER_OID,
        CUST.CUSTOMER_CODE,
        CUST.BUSINESS_CLASS_CODE,
        CUST.END_CORPORATION_CODE,
        CORP.CUSTOMER_CODE AS CORPORATION_CODE
    FROM  MODELN_CUSTOMER AS CUST
    LEFT JOIN MODELN_CUSTOMER AS CORP 
    ON CUST.PARENT_CUSTOMER_OID = CORP.CRM_CUSTOMER_OID
)
-- BILLING
,BILLING AS (
    SELECT 
        BILL.MARKET_PRODUCT_NUMBER ,
        FIS_WEEK.FISCAL_WEEK_KEY,
        BILL.BILLING_NET_QUANTITY AS RESALE_QUANTITY,
        BILL.BILLING_NET_AMOUNT_USD AS COST_USD ,
        BILL.BILLING_NET_AMOUNT_USD AS RESALE_NET_USD ,
        BILL.INDIRECT_CUSTOMER_CODE  ,
        COALESCE(BILL.END_CUSTOMER_CODE,BILL.INDIRECT_CUSTOMER_CODE) AS END_CUSTOMER_CODE ,
        NULL AS DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME ,
        NULL AS DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER,
        CORP.CORPORATION_CODE
        AS END_CORPORATION_CODE,
        DIR_REGION.SALES_REGION_CODE AS DIRECT_SALES_REGION_CODE,
        END_REGION.SALES_REGION_CODE AS END_SALES_REGION_CODE
    FROM  
        {{ref ('MART_SALES_BILLING_FACT')}} BILL 
        LEFT JOIN MODELN_CUST_CORP CORP
            ON BILL.DIRECT_CUSTOMER_CODE = CORP.CUSTOMER_CODE
        LEFT JOIN  SALES_REGION DIR_REGION 
            ON BILL.INDIRECT_CUSTOMER_CODE = DIR_REGION.CUSTOMER_CODE
        LEFT JOIN  SALES_REGION END_REGION 
            ON BILL.END_CUSTOMER_CODE = END_REGION.CUSTOMER_CODE
        INNER JOIN FISCAL_WEEK_VW FIS_WEEK 
            ON BILL.PROCESS_DATE = FIS_WEEK.CALENDAR_DATE 
        LEFT JOIN {{ref('SALES_PRODUCT')}} PRDCT 
            ON BILL.INTERNAL_PART_NUMBER_KEY=PRDCT.PART_KEY
        WHERE BILL.PROCESS_DATE >= TRUNC(CURRENT_DATE - INTERVAL '5 YEAR','YEAR')
            AND UPPER(BILL.BUSINESS_CLASS_CODE) NOT IN ('DIST', 'D3PL', 'CIPO')              
            AND BILL.IS_TRUE_BILL = 1
            AND CASE 
                    WHEN  SOURCE_OF_SALE='ON' AND LEFT(PRDCT.PAL2_CODE,1) in ('A','B','C','D','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','V','W','X','Y')
                    THEN 1 
                    WHEN SOURCE_OF_SALE<>'ON'
                    THEN 1
                END =1
)

--POS
,POINT_OF_SALES AS(
    SELECT 
        POS.MARKET_PRODUCT_NUMBER ,
        FIS_WEEK.FISCAL_WEEK_KEY,
        POS.RESALE_QUANTITY ,
        POS.DISTRIBUTOR_COST_AMOUNT_USD AS COST_USD,
        POS.RESALE_NET_AMOUNT_USD AS RESALE_NET_USD,
        POS.INDIRECT_CUSTOMER_CODE ,
        CASE 
            WHEN SOURCE_DATA_FROM='POS' 
                THEN COALESCE(POS.END_CUSTOMER_CODE,POS.INDIRECT_CUSTOMER_CODE) 
            ELSE NULL 
        END AS END_CUSTOMER_CODE ,
        POS.DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME ,
        POS.DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER,
        POS.END_CORPORATION_CODE,
        DIR_REGION.SALES_REGION_CODE AS DIRECT_SALES_REGION_CODE,
        END_REGION.SALES_REGION_CODE AS END_SALES_REGION_CODE
    FROM    
        {{ref ('MART_SALES_POINT_OF_SALES_FACT')}} POS
    LEFT JOIN   SALES_REGION DIR_REGION 
        ON POS.INDIRECT_CUSTOMER_CODE = DIR_REGION.CUSTOMER_CODE
    LEFT JOIN  SALES_REGION END_REGION 
        ON POS.END_CUSTOMER_CODE = END_REGION.CUSTOMER_CODE
    INNER JOIN FISCAL_WEEK_VW FIS_WEEK 
        ON POS.FISCAL_SHIP_DATE = FIS_WEEK.CALENDAR_DATE
    WHERE 
        POS.BIW_LOGICAL_DELETE_FLAG ='N'
        AND POS.IS_TRUE_POS = 1
        AND  POS.FISCAL_SHIP_DATE >= TRUNC(CURRENT_DATE - INTERVAL '5 YEAR','YEAR')
)

--STEP 6: BUILD ECC ON TOP OF POS AND BILLING DATA 
,ECC AS (
    SELECT 
        MARKET_PRODUCT_NUMBER ,
        FISCAL_WEEK_KEY,
        RESALE_QUANTITY,
        COST_USD ,
        RESALE_NET_USD ,
        INDIRECT_CUSTOMER_CODE  ,
        END_CUSTOMER_CODE ,
        DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME,
        DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER,
        END_CORPORATION_CODE,
        'BILLING' AS SOURCE_OF_DATA,
        DIRECT_SALES_REGION_CODE,
        END_SALES_REGION_CODE
    FROM BILLING

    UNION ALL
    
    SELECT 
        MARKET_PRODUCT_NUMBER ,
        FISCAL_WEEK_KEY,
        RESALE_QUANTITY ,
        COST_USD,
        RESALE_NET_USD,
        INDIRECT_CUSTOMER_CODE ,
        END_CUSTOMER_CODE ,
        DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME,
        DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER,
        END_CORPORATION_CODE,
        'POS' AS SOURCE_OF_DATA,
        DIRECT_SALES_REGION_CODE,
        END_SALES_REGION_CODE
    FROM POINT_OF_SALES
)


-- STEP 7: SUMMARY THE ECC DATA
,ECC_SUMMARY AS (
    SELECT 
        MARKET_PRODUCT_NUMBER ,
        FISCAL_WEEK_KEY ,

        SUM(NVL(RESALE_QUANTITY,0)) AS TOTAL_RESALE_QUANTITY,
        SUM(CASE WHEN SOURCE_OF_DATA ='POS' THEN NVL(RESALE_QUANTITY,0) END) AS TOTAL_RESALE_QUANTITY_POS,
        SUM(CASE WHEN SOURCE_OF_DATA ='BILLING' THEN NVL(RESALE_QUANTITY,0) END) AS TOTAL_RESALE_QUANTITY_BILLING,

        SUM(NVL(COST_USD,0)) AS TOTAL_COST_USD,
        SUM(NVL(RESALE_NET_USD,0)) AS TOTAL_RESALE_NET_USD,

        COUNT( DISTINCT DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER) AS DISTRIBUTOR_SHIP_TO_CUSTOMER_COUNT,
        COUNT( DISTINCT INDIRECT_CUSTOMER_CODE) AS  INDIRECT_CUSTOMER_COUNT,
        COUNT( DISTINCT END_CUSTOMER_CODE) AS END_CUSTOMER_COUNT,

		COUNT(DISTINCT DIRECT_SALES_REGION_CODE	) AS DIRECT_REGION_COUNT,
        COUNT(DISTINCT END_SALES_REGION_CODE	) AS END_REGION_COUNT,        

        COUNT( DISTINCT END_CORPORATION_CODE) AS END_CORPORATION_COUNT,
        COUNT( DISTINCT CASE WHEN SOURCE_OF_DATA ='POS' THEN  END_CORPORATION_CODE END) AS END_CORPORATION_POS_COUNT,
        COUNT( DISTINCT CASE WHEN SOURCE_OF_DATA ='BILLING' THEN END_CORPORATION_CODE END) AS END_CORPORATION_BILLING_COUNT
    FROM ECC     
    GROUP BY 
        MARKET_PRODUCT_NUMBER,
        FISCAL_WEEK_KEY
) 
      
-- STEP 8 FINAL SQL COMBINE ECC SUMMARY AND PRODUCT COMPETITOR SUMMARY DATA 
SELECT 
    MD5(OBJECT_CONSTRUCT('COL1', PRDCT.PRODUCT_ID::STRING
                        ,'COL2', PRDCT.FISCAL_WEEK_KEY::STRING
                        )::STRING        
        )AS MARKET_PRODUCT_NUMBER_KEY
    ,PRDCT.PRODUCT_ID AS PRODUCT_ID
    ,PRDCT.FISCAL_WEEK_KEY  
    ,PRDCT.WEB_PART_NAME
    ,ECC.TOTAL_RESALE_QUANTITY
    ,ECC.TOTAL_RESALE_QUANTITY_POS
    ,ECC.TOTAL_RESALE_QUANTITY_BILLING
    ,ECC.TOTAL_COST_USD
    ,ECC.TOTAL_RESALE_NET_USD
    ,ECC.DISTRIBUTOR_SHIP_TO_CUSTOMER_COUNT
    ,ECC.INDIRECT_CUSTOMER_COUNT
    ,ECC.END_CUSTOMER_COUNT
    ,ECC.DIRECT_REGION_COUNT
    ,ECC.END_REGION_COUNT
    ,ECC.END_CORPORATION_COUNT
    ,ECC.END_CORPORATION_POS_COUNT
    ,ECC.END_CORPORATION_BILLING_COUNT
    ,PRDCT.COMPETITOR_REPLACEMENT_SIMILAR_COUNT
    ,PRDCT.COMPETITOR_REPLACEMENT_DIRECT_COUNT
    ,PRDCT.COMPETITOR_REPLACEMENT_DIRECT_SIMILAR_COUNT
    ,CASE 
        WHEN PRDCT.PART_CLASS_CODE IN ('NP', 'KT')    
            THEN 'Non Product'     
        WHEN PRDCT.IS_CUST_SPEC=1                        
            THEN 'Custom'
        WHEN ECC.TOTAL_RESALE_QUANTITY > 50000000 
                AND ECC.END_CORPORATION_COUNT > 500 
            THEN 'Super Commodity'
        WHEN ECC.TOTAL_RESALE_QUANTITY > 10000000 
                AND ECC.END_CORPORATION_COUNT > 100 
            THEN 'Commodity 1'
        WHEN ECC.TOTAL_RESALE_QUANTITY > 5000000  
                AND ECC.END_CORPORATION_COUNT > 20 
                AND PRDCT.COMPETITOR_REPLACEMENT_DIRECT_COUNT >= 1 
            THEN 'Commodity 2'
        WHEN ECC.END_CORPORATION_COUNT >= 30    
            THEN 'Firm - High Cust'
        WHEN ECC.END_CORPORATION_COUNT <= 4     
            THEN 'Firm - Low Cust'
        WHEN ECC.TOTAL_RESALE_QUANTITY = 0 
                OR ECC.TOTAL_RESALE_QUANTITY IS NULL 
            THEN 'No 6Mo Revenue'
        ELSE 'Firm'
    END    AS PRODUCT_CLASSIFICATION ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}}::NUMBER AS BIW_BATCH_ID,
    md5(object_construct ('col1',PRODUCT_ID::string, 'col2',PRDCT.FISCAL_WEEK_KEY::string,
    'col3',WEB_PART_NAME::string, 'col4',TOTAL_RESALE_QUANTITY::string, 'col5',TOTAL_RESALE_QUANTITY_POS::string,
    'col6',TOTAL_RESALE_QUANTITY_BILLING::string, 'col7',TOTAL_COST_USD::string, 'col8',TOTAL_RESALE_NET_USD::string, 'col9',DISTRIBUTOR_SHIP_TO_CUSTOMER_COUNT::string,
    'col10',INDIRECT_CUSTOMER_COUNT::string, 'col11',END_CUSTOMER_COUNT::string, 'col12',DIRECT_REGION_COUNT::string, 'col13',END_REGION_COUNT::string,
    'col14',END_CORPORATION_COUNT::string, 'col15',END_CORPORATION_POS_COUNT::string, 'col16',END_CORPORATION_BILLING_COUNT::string,
    'col17',COMPETITOR_REPLACEMENT_SIMILAR_COUNT::string, 'col18',COMPETITOR_REPLACEMENT_DIRECT_COUNT::string, 'col19',COMPETITOR_REPLACEMENT_DIRECT_SIMILAR_COUNT::string,
    'col20',PRODUCT_CLASSIFICATION::string)::string )::BINARY as BIW_MD5_KEY  
    FROM 
    COMPETITOR_SUMMARY PRDCT
    LEFT JOIN ECC_SUMMARY ECC
        ON PRDCT.PRODUCT_ID= ECC.MARKET_PRODUCT_NUMBER
        AND PRDCT.FISCAL_WEEK_KEY = ECC.FISCAL_WEEK_KEY